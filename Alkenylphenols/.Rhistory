bat.tab <- ddply(bat_ag, c("treatment"), summarise,
N    = length(amount_eaten),
mean = mean(amount_eaten),
sd   = sd(amount_eaten),
se   = sd / sqrt(N))
bat.tab
bat.tab <- ddply(bat_ag, c("treatment"), summarise,
N    = length(amount_eaten),
mean = mean(amount_eaten),
sd   = sd(amount_eaten),
se   = sd / sqrt(N))
bat.tab
bird.tab <- ddply(bird_ag, c("treatment"), summarise,
N    = length(amount_eaten),
mean = mean(amount_eaten),
sd   = sd(amount_eaten),
se   = sd / sqrt(N))
bird.tab
(0.5859531/1.4278438)*100
(1.233967/1.347717)*100
(1.347717/1.233967)*100
(1.347717-1.233967)/1.347717
0.08440199*100
#EXPORT TABLE
write.table(dev.tab, file = "TableS5.csv", sep = ",", quote = FALSE, row.names = F)
#EXPORT TABLE
write.table(tissue.tab, file = "TableS4.csv", sep = ",", quote = FALSE, row.names = F)
bat.tab
bird.tab
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library(knitr)
library(lme4)
library(visreg)
install.packages("visreg")
library(tidyverse)
library(knitr)
library(lme4)
library(visreg)
library(AMR)
install.packages("AMR")
library(tidyverse)
library(knitr)
library(lme4)
library(visreg)
library(AMR)
library(vegan)
install.packages("vegan")
library(tidyverse)
library(knitr)
library(lme4)
library(visreg)
library(AMR)
library(vegan)
library(kableExtra)
library(lmerTest) #for p-values in linear mixed effects model
install.packages("lmerTest")
library(tidyverse)
library(knitr)
library(lme4)
library(visreg)
library(AMR)
library(vegan)
library(kableExtra)
library(lmerTest) #for p-values in linear mixed effects model
file_list <- list.files(path= "data/micro_dilution_assay/2018/", pattern="R3_*") # create list of all .csv files in folder
# read in each .csv file in file_list and rbind them into a data frame called data
datalist <-
do.call("rbind",
lapply(file_list,
function(x)
read_csv(paste("data/micro_dilution_assay/2018/", x, sep=''))))
#Ignore the error message here, it's complaining about the way the data columns are named
head(datf)
datf <- read.csv(file="Maynard_etal_FungalBioassays.csv",head=TRUE,fill=T)
datf <- datf[1:81,]
datf$Conc<-as.numeric(datf$Conc)
datf$fungi<-as.character(datf$fungi)
datf$nfungi[datf$fungi=="R3"]="Microdochium lycopodium"
datf$nfungi[datf$fungi=="R23"]="Fusarium verticillioides"
datf$nfungi[datf$fungi=="R26"]="Fusarium sp."
mod.mix<-lmer(abs_corr~Conc*fungi+(1|well))
head(datf)
mod.mix<-lmer(abs_corr~Conc*fungi+(1|well), data=datf)
summary(mod.mix)
Anova(mod.mix)
View(datf)
#average triplicates
ag.fun<-aggregate(abs_corr~conc+fungi, data=datf, FUN=mean)
#average triplicates
ag.fun<-aggregate(abs_corr~Conc+fungi, data=datf, FUN=mean)
mod.mix<-lmer(abs_corr~Conc*fungi+(1|well), data=ag.fun)
#average triplicates
ag.fun<-aggregate(abs_corr~Conc+fungi+well, data=datf, FUN=mean)
mod.mix<-lmer(abs_corr~Conc*fungi+(1|well), data=ag.fun)
View(ag.fun)
mod.mix<-lm(abs_corr~Conc*fungi, data=ag.fun)
summary(mod.mix)
Anova(mod.mix)
fun.tab <- ddply(ag.fun, c("fungi", "Conc"), summarise,
N    = length(abs_corr),
mean = mean(abs_corr),
sd   = sd(abs_corr),
se   = sd / sqrt(N))
fun.tab
fun.tab <- ddply(ag.fun, c("fungi"), summarise,
N    = length(abs_corr),
mean = mean(abs_corr),
sd   = sd(abs_corr),
se   = sd / sqrt(N))
fun.tab
?Anova
mod.fun<-lm(abs_corr~Conc*fungi, data=ag.fun)
summary(mod.fun)
Anova(mod.fun)
summary(mod.fun$fungi)$coefficients[2,2]
summary(mod.fun)$coef
summary(mod.fun)
Anova(mod.fun)
summary(mod.fun)$coef
coef(mod.fun)
rm(list=ls())
# Load Libraries ----------------------------------------------------------
library(dplyr)
library(tidyr)
library(Rmisc)
library(reshape)
library(multcomp)
library(MASS)
library(RColorBrewer)
library(ggplot2)
library(multcompView)
library(emmeans)
library(lme4)
library(AICcmodavg)
library(betareg)
library(car)
library(viridis)
library(knitr)
library(kableExtra)
library(tinytex)
library(ggpubr)
library(pals)
datf<- read.csv(file="Maynard_etal_FungalBioassays.csv",head=TRUE,fill=T)
datf <- datf[1:81,]
datf$Conc<-as.numeric(datf$Conc)
datf$fungi<-as.character(datf$fungi)
datf$nfungi[datf$fungi=="R3"]="Microdochium lycopodinum"
datf$nfungi[datf$fungi=="R23"]="Fusarium verticillioides"
datf$nfungi[datf$fungi=="R26"]="Fusarium sp."
#average triplicates
ag.fun<-aggregate(abs_corr~Conc+nfungi+well, data=datf, FUN=mean)
mod.fun<-lm(abs_corr~Conc*nfungi, data=ag.fun)
summary(mod.fun)
Anova(mod.fun)
library(effects)
install.packages("effects")
library(effects)
summary(allEffects(mod.fun))
plot(allEffects(mod.fun))
datf <- datf[order(datf$fungi),]
ag.fun<-ag.fun[order(ag.fun$nfungi),]
R26<-slice(ag.fun, 1:9)
R23<-slice(ag.fun, 10:18)
R3<-slice(ag.fun, 19:27)
mod23<-lm(data = R23, abs_corr~Conc)
mod26<-lm(data = R26, abs_corr~Conc)
mod3<-lm(data = R3, abs_corr~Conc)
summary(mod23)#t=-7.03,p=0.0002,r2=0.88
summary(mod26)#t=-1.0, p=0.351, r2=0.12
summary(mod3)#t=-5.213, p=0.00124, r2=0.80
R23$yhat<-predict(mod23)
predplot23<-ggplot(R23)+
geom_smooth(aes(x=Conc, y=yhat), color="red")+
geom_point(aes(x=Conc, y=abs_corr))
predplot23
R26$yhat<-predict(mod26)
predplot26<-ggplot(R26)+
geom_smooth(aes(x=Conc, y=yhat), color="red")+
geom_point(aes(x=Conc, y=abs_corr))
predplot26
R3$yhat<-predict(mod3)
predplot3<-ggplot(R3)+
geom_smooth(aes(x=Conc, y=yhat), color="red")+
geom_point(aes(x=Conc, y=abs_corr))
predplot3
##DATA PLOT
###load italics for legend
leg_fung <- c(expression(paste(italic("Fusarium "), "sp.")),
expression(paste(italic("Fusarium verticillioides"))),
expression(paste(italic("Microdochium lycopodinum"))))
#plot
plota<-ggplot(ag.fun, aes(x=Conc, y=abs_corr, group=nfungi))+
geom_smooth(aes(color=nfungi), method = "lm", se=T)+
geom_point(aes(color=nfungi))+
theme_classic()+
scale_color_viridis(discrete = T, option = "D", labels=leg_fung)+
labs(x="Alkenylphenol concentration (mg/mL)", y="Average absorbance (OD)", color=" ")+
theme(legend.text.align = 0, text = element_text(size=18),legend.position="top")+
annotate("text", x = 28, y = 0.66,
label = "paste(italic(R) ^ 2, \" = 0.88\")", parse = TRUE, size =5)+
annotate("text", x = 28, y = 0.55,
label = "paste(italic(R) ^ 2, \" = 0.12\")", parse = TRUE, size =5)+
annotate("text", x = 28, y = 0.415,
label = "paste(italic(R) ^ 2, \" = 0.80\")", parse = TRUE, size =5)+
scale_x_continuous(expand = c(0, 0), limits = c(0.0,32.0))
plota
#plot
plota<-ggplot(ag.fun, aes(x=Conc, y=abs_corr, group=nfungi))+
geom_smooth(aes(color=nfungi), method = "lm", se=T)+
geom_point(aes(color=nfungi))+
theme_classic()+
scale_color_viridis(discrete = T, option = "D", labels=leg_fung)+
labs(x="Alkenylphenol concentration (mg/mL)", y="Average absorbance (OD)", color=" ")+
theme(legend.text.align = 0, text = element_text(size=18),legend.position="top")+
annotate("text", x = 28, y = 0.66,
label = "paste(italic(R) ^ 2, \" = 0.88\")", parse = TRUE, size =5)+
annotate("text", x = 28, y = 0.55,
label = "paste(italic(R) ^ 2, \" = 0.12\")", parse = TRUE, size =5)+
annotate("text", x = 28, y = 0.415,
label = "paste(italic(R) ^ 2, \" = 0.80\")", parse = TRUE, size =5)+
scale_x_continuous(expand = c(0, 0))
plota
#plot
plota<-ggplot(ag.fun, aes(x=Conc, y=abs_corr, group=nfungi))+
geom_smooth(aes(color=nfungi), method = "lm", se=T)+
geom_point(aes(color=nfungi))+
theme_classic()+
scale_color_viridis(discrete = T, option = "D", labels=leg_fung)+
labs(x="Alkenylphenol concentration (mg/mL)", y="Average absorbance (OD)", color=" ")+
theme(legend.text.align = 0, text = element_text(size=18),legend.position="top")+
annotate("text", x = 28, y = 0.66,
label = "paste(italic(R) ^ 2, \" = 0.88\")", parse = TRUE, size =5)+
annotate("text", x = 28, y = 0.55,
label = "paste(italic(R) ^ 2, \" = 0.12\")", parse = TRUE, size =5)+
annotate("text", x = 28, y = 0.415,
label = "paste(italic(R) ^ 2, \" = 0.80\")", parse = TRUE, size =5)+
scale_x_continuous(expand = c(0, 0), limits = c(0.0,32.0))
plota
plota
#plot
plota<-ggplot(ag.fun, aes(x=Conc, y=abs_corr, group=nfungi))+
geom_smooth(aes(color=nfungi), method = "lm", se=T)+
geom_point(aes(color=nfungi))+
theme_classic()+
scale_color_viridis(discrete = T, option = "D", labels=leg_fung)+
labs(x="Alkenylphenol concentration (mg/mL)", y="Average absorbance (OD)", color=" ")+
theme(legend.text.align = 0, text = element_text(size=18),legend.position="top")+
annotate("text", x = 28, y = 0.66,
label = "paste(italic(R) ^ 2, \" = 0.88\")", parse = TRUE, size =5)+
annotate("text", x = 28, y = 0.55,
label = "paste(italic(R) ^ 2, \" = 0.12\")", parse = TRUE, size =5)+
annotate("text", x = 28, y = 0.415,
label = "paste(italic(R) ^ 2, \" = 0.80\")", parse = TRUE, size =5)+
scale_x_continuous(expand = c(0, 0), limits = c(0.0,33.0))
plota
#EXPORT PLOT
tiff('fungiplot.tiff', units="in", width=8, height=5, res=500)
plota
dev.off()
#plot
plota<-ggplot(ag.fun, aes(x=Conc, y=abs_corr, group=nfungi))+
geom_smooth(aes(color=nfungi), method = "lm", se=T)+
geom_point(aes(color=nfungi))+
theme_classic()+
scale_color_viridis(discrete = T, option = "D", labels=leg_fung)+
labs(x="Alkenylphenol concentration (mg/mL)", y="Average absorbance (OD)", color=" ")+
theme(legend.text.align = 0, text = element_text(size=18),legend.position="top")+
annotate("text", x = 28, y = 0.66,
label = "paste(italic(R) ^ 2, \" = 0.88\")", parse = TRUE, size =5)+
annotate("text", x = 28, y = 0.55,
label = "paste(italic(R) ^ 2, \" = 0.12\")", parse = TRUE, size =5)+
annotate("text", x = 28, y = 0.415,
label = "paste(italic(R) ^ 2, \" = 0.80\")", parse = TRUE, size =5)+
scale_x_continuous(expand = c(0, 0), limits = c(0.0,32.0))
plota
#EXPORT PLOT
tiff('fungiplot.tiff', units="in", width=8, height=5, res=500)
plota
dev.off()
df_all <- read.csv(file="Maynard_etal_AlkenylphenolQuantChem_edit.csv",head=TRUE)
#removing columns unnec. for analysis
df_all <- subset(df_all, select = -c(1, 6:32))
df_all[df_all == "#VALUE!"] <- NA
df_all[df_all == "NA"] <- 0
##DATA CLEANING
df_all$A_pdw<-as.numeric(as.character(df_all$A_pdw))
df_all$B_pdw<-as.numeric(as.character(df_all$B_pdw))
df_all$C_pdw<-as.numeric(as.character(df_all$C_pdw))
df_all$D_pdw<-as.numeric(as.character(df_all$D_pdw))
df_all$E_pdw<-as.numeric(as.character(df_all$E_pdw))
df_all$F_pdw<-as.numeric(as.character(df_all$F_pdw))
df_all$G_pdw<-as.numeric(as.character(df_all$G_pdw))
df_all$H_pdw<-as.numeric(as.character(df_all$H_pdw))
df_all$I_pdw<-as.numeric(as.character(df_all$I_pdw))
df_all$J_pdw<-as.numeric(as.character(df_all$J_pdw))
df_all$tissue<-as.factor(df_all$tissue)
df_all$plant<-as.factor(df_all$plant)
df_all$stage<-as.factor(df_all$stage)
#gather rows into columns, more data cleaning
datall <- gather(df_all, "compound", "per_dry_wt", 5:14)
datall$per_dry_wt<-as.numeric(datall$per_dry_wt)
datall$compound<-as.character(datall$compound)
datall$stage<-as.character(datall$stage)
#dry weight % -> proportions
datall$props<-(datall$per_dry_wt/100)
##splitting between tissue types
##only leaves
dfl <- filter(datall, tissue == "L")
##only pulp
dat <- filter(datall, tissue == "P")
#labeling
datall <- datall[order(datall$tissue),]
datall <- datall[order(datall$stage),]
datall$tissue<-as.character(datall$tissue)
datall$plant<-as.character(datall$plant)
#sep stages within tissues
datall$tissue[1:200]<-"R"
datall$tissue[261:470]<-"U2"
datall$tissue[471:660]<-"U3"
datall$tissue[661:870]<-"F4"
datall$tissue[871:1020]<-"F5"
datall$tissue[1021:1130]<-"F6"
datall$tissue[datall$tissue=="R"]="Ripe pulp (1)"
datall$tissue[datall$tissue=="U2"]="Unripe pulp (2)"
datall$tissue[datall$tissue=="U3"]="Unripe pulp (3)"
datall$tissue[datall$tissue=="F4"]="Flowers (4)"
datall$tissue[datall$tissue=="F5"]="Flowers (5)"
datall$tissue[datall$tissue=="F6"]="Dev. flowers (6)"
datall$tissue[datall$tissue=="S"]="Seeds"
datall$tissue[datall$stage=="M"]="Mature leaves"
datall$compound[datall$compound=="A_pdw"]="A"
datall$compound[datall$compound=="B_pdw"]="B"
datall$compound[datall$compound=="C_pdw"]="C"
datall$compound[datall$compound=="D_pdw"]="D"
datall$compound[datall$compound=="E_pdw"]="E"
datall$compound[datall$compound=="F_pdw"]="F"
datall$compound[datall$compound=="G_pdw"]="G"
datall$compound[datall$compound=="H_pdw"]="H"
datall$compound[datall$compound=="I_pdw"]="I"
datall$compound[datall$compound=="J_pdw"]="J"
datall <- datall[order(datall$stage),]
dat_select<-datall[c(1:470,661:870,1131:1170),]
#ANALYSIS
a10<-aggregate(props~tissue+plant, data=dat_select, FUN=sum)
beta10<-betareg(props ~ tissue, data=a10)
summary(beta10)
d10<-emmeans(beta10,pairwise~tissue, type="response")
d10
CLD(d10$emmeans,  Letters ='ABCDEFGHIJKLMNOPQRS')
##plot
a10$tissue[a10$tissue=="Unripe pulp (2)"]="Unripe pulp"
a10$tissue[a10$tissue=="Flowers (4)"]="Flowers"
a10$tissue[a10$tissue=="Ripe pulp (1)"]="Ripe pulp"
#plot w/o color
tissueplot_bwj<-ggplot(a10, aes(x=tissue, y=props)) +
geom_boxplot(outlier.shape = NA) + geom_jitter(position=position_jitter(width = 0.04), alpha=0.4)+
labs(x=" ", y="Total alkenylphenols (prop. dw)")+
theme_classic()+
scale_x_discrete(limits=c("Mature leaves","Flowers", "Unripe pulp","Ripe pulp",
"Seeds"))+
stat_summary(geom = 'text', label = c("B","A","C","A","C"),
fun.y = max, vjust = -0.8)+
scale_y_continuous(limits = c(0, 0.120))+
theme(text = element_text(size=15),
axis.text.x = element_text(angle=45, hjust=1))
tissueplot_bwj
at[is.na(dat)] <- 0
dat$stage2 = (as.numeric(dat$stage))^2
dat$stage.num = as.numeric(dat$stage)
#aggregating dataset so each point=one plant and isn't sep by compound
ag_dat<-aggregate(props~plant+stage.num+stage2,data=dat,FUN=sum)
ag_dat$plant<-as.character(ag_dat$plant)
stage_line_plot2<-ggplot(ag_dat)+
geom_line(aes(x=stage.num,y=props,color=plant),alpha=0.5,size=1,show.legend = F)+
stat_smooth(aes(x=stage.num,y=props),method = "lm", formula = y ~ x + I(x^2), size = 1.5,
linetype="solid", color="black")+
labs(x=" ", y="Total alkenylphenols (prop. dw)")+
theme_classic()+
scale_color_viridis(discrete = T, option = "D")+
scale_x_reverse(breaks=c(6,5,4,3,2,1))+
theme(text = element_text(size = 15))+
scale_y_continuous(expand=c(0,0))+
coord_cartesian(xlim=c(1,6), ylim=c(0,.1))
stage_line_plot2
##EXPORT PLOT
tiff('stage_line_plot2.tiff', units="in", width=8, height=5, res=500)
stage_line_plot2
dev.off()
stage_line_plot2<-ggplot(ag_dat)+
geom_line(aes(x=stage.num,y=props,color=plant),alpha=0.5,size=1,show.legend = F)+
stat_smooth(aes(x=stage.num,y=props),method = "lm", formula = y ~ x + I(x^2), size = 1.5,
linetype="solid", color="black")+
labs(x=" ", y="Total alkenylphenols (prop. dw)")+
theme_classic()+
scale_color_viridis(discrete = T, option = "D")+
scale_x_reverse(breaks=c(6,5,4,3,2,1))+
theme(text = element_text(size = 15))+
scale_y_continuous(expand=c(0,0), limits = c(0,6))+
coord_cartesian(xlim=c(1,6), ylim=c(0,.1))
stage_line_plot2
stage_line_plot2<-ggplot(ag_dat)+
geom_line(aes(x=stage.num,y=props,color=plant),alpha=0.5,size=1,show.legend = F)+
stat_smooth(aes(x=stage.num,y=props),method = "lm", formula = y ~ x + I(x^2), size = 1.5,
linetype="solid", color="black")+
labs(x=" ", y="Total alkenylphenols (prop. dw)")+
theme_classic()+
scale_color_viridis(discrete = T, option = "D")+
scale_x_reverse(breaks=c(6,5,4,3,2,1))+
theme(text = element_text(size = 15))+
scale_y_continuous(expand=c(0,0), limits = c(0,6.0))+
coord_cartesian(xlim=c(1,6), ylim=c(0,.1))
stage_line_plot2
stage_line_plot2<-ggplot(ag_dat)+
geom_line(aes(x=stage.num,y=props,color=plant),alpha=0.5,size=1,show.legend = F)+
stat_smooth(aes(x=stage.num,y=props),method = "lm", formula = y ~ x + I(x^2), size = 1.5,
linetype="solid", color="black")+
labs(x=" ", y="Total alkenylphenols (prop. dw)")+
theme_classic()+
scale_color_viridis(discrete = T, option = "D")+
scale_x_reverse(breaks=c(6,5,4,3,2,1))+
theme(text = element_text(size = 15))+
scale_y_continuous(expand=c(0,0), limits = c(0.0,6.0))+
coord_cartesian(xlim=c(1,6), ylim=c(0,.1))
stage_line_plot2
ggplot(ag_dat)+
geom_line(aes(x=stage.num,y=props,color=plant),alpha=0.5,size=1,show.legend = F)+
stat_smooth(aes(x=stage.num,y=props),method = "lm", formula = y ~ x + I(x^2), size = 1.5,
linetype="solid", color="black")+
labs(x=" ", y="Total alkenylphenols (prop. dw)")+
theme_classic()+
scale_color_viridis(discrete = T, option = "D")+
scale_x_reverse(breaks=c(6,5,4,3,2,1))+
theme(text = element_text(size = 15))+
scale_y_continuous(expand=c(0,0))
stage_line_plot2<-ggplot(ag_dat)+
geom_line(aes(x=stage.num,y=props,color=plant),alpha=0.5,size=1,show.legend = F)+
stat_smooth(aes(x=stage.num,y=props),method = "lm", formula = y ~ x + I(x^2), size = 1.5,
linetype="solid", color="black")+
labs(x=" ", y="Total alkenylphenols (prop. dw)")+
theme_classic()+
scale_color_viridis(discrete = T, option = "D")+
scale_x_reverse(breaks=c(6,5,4,3,2,1))+
theme(text = element_text(size = 15))+
scale_y_continuous(expand=c(0,0))+
coord_cartesian(xlim=c(1,6.0), ylim=c(0,.1))
stage_line_plot2
stage_line_plot2<-ggplot(ag_dat)+
geom_line(aes(x=stage.num,y=props,color=plant),alpha=0.5,size=1,show.legend = F)+
stat_smooth(aes(x=stage.num,y=props),method = "lm", formula = y ~ x + I(x^2), size = 1.5,
linetype="solid", color="black")+
labs(x=" ", y="Total alkenylphenols (prop. dw)")+
theme_classic()+
scale_color_viridis(discrete = T, option = "D")+
scale_x_reverse(breaks=c(6,5,4,3,2,1))+
theme(text = element_text(size = 15))+
scale_y_continuous(expand=c(0,0))+
coord_cartesian(xlim=c(1.0,6.0), ylim=c(0,.1))
stage_line_plot2
stage_line_plot2<-ggplot(ag_dat)+
geom_line(aes(x=stage.num,y=props,color=plant),alpha=0.5,size=1,show.legend = F)+
stat_smooth(aes(x=stage.num,y=props),method = "lm", formula = y ~ x + I(x^2), size = 1.5,
linetype="solid", color="black")+
labs(x=" ", y="Total alkenylphenols (prop. dw)")+
theme_classic()+
scale_color_viridis(discrete = T, option = "D")+
scale_x_reverse(breaks=c(6,5,4,3,2,1))+
theme(text = element_text(size = 15))+
scale_y_continuous(expand=c(0,0))+
coord_cartesian(xlim=c(1.0,6.0), ylim=c(0.0,.1))
stage_line_plot2
stage_line_plot2<-ggplot(ag_dat)+
geom_line(aes(x=stage.num,y=props,color=plant),alpha=0.5,size=1,show.legend = F)+
stat_smooth(aes(x=stage.num,y=props),method = "lm", formula = y ~ x + I(x^2), size = 1.5,
linetype="solid", color="black")+
labs(x=" ", y="Total alkenylphenols (prop. dw)")+
theme_classic()+
scale_color_viridis(discrete = T, option = "D")+
scale_x_reverse(breaks=c(6,5,4,3,2,1))+
theme(text = element_text(size = 15))+
scale_y_continuous(expand=c(0.0,0.0))+
coord_cartesian(xlim=c(1.0,6.0), ylim=c(0.0,.1))
stage_line_plot2
stage_line_plot2<-ggplot(ag_dat)+
geom_line(aes(x=stage.num,y=props,color=plant),alpha=0.5,size=1,show.legend = F)+
stat_smooth(aes(x=stage.num,y=props),method = "lm", formula = y ~ x + I(x^2), size = 1.5,
linetype="solid", color="black")+
labs(x=" ", y="Total alkenylphenols (prop. dw)")+
theme_classic()+
scale_color_viridis(discrete = T, option = "D")+
scale_x_reverse(breaks=c(6,5,4,3,2,1))+
theme(text = element_text(size = 15))+
scale_y_continuous(expand=c(0.0,0.0))+
scale_x_discrete(expand=c(0.0,0.0))+
coord_cartesian(xlim=c(1.0,6.0), ylim=c(0.0,.1))
stage_line_plot2<-ggplot(ag_dat)+
geom_line(aes(x=stage.num,y=props,color=plant),alpha=0.5,size=1,show.legend = F)+
stat_smooth(aes(x=stage.num,y=props),method = "lm", formula = y ~ x + I(x^2), size = 1.5,
linetype="solid", color="black")+
labs(x=" ", y="Total alkenylphenols (prop. dw)")+
theme_classic()+
scale_color_viridis(discrete = T, option = "D")+
scale_x_reverse(breaks=c(6,5,4,3,2,1), expand=c(0,0))+
theme(text = element_text(size = 15))+
scale_y_continuous(expand=c(0.0,0.0))+
coord_cartesian(xlim=c(1.0,6.0), ylim=c(0.0,.1))
stage_line_plot2
##EXPORT PLOT
tiff('stage_line_plot2.tiff', units="in", width=8, height=5, res=500)
stage_line_plot2
dev.off()
